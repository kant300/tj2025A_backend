
[ 파일 만들기 ]
    1. [src]폴더 오른쪽 클릭
    2. [새로만들기]
        1. java 클래스
        2. 파일 ( 파일명.txt ): .java파일 아닌 어떤 종류의 파일 생성할때
        3. 패키지 ( 폴더 )

[ 자바 클래스 파일 생성 ]
    1. [src]폴더 오른쪽 클릭
    2. [새로만들기] -> [ 패키지 ] -> (강의기준 day01~ ) ,패키지는 클래스들을 그룹화하고 관리하기 위해
    3. [특정폴더] 오른쪽 클릭 -> [ 새로만들기 ] -> [java클래스]
        * 클래스 파일 명은 첫글자를 무조건 대문자로 시작.
        예) Example1

[ 자바 구동 원리 ]
    1. [코딩] 개발자는 .java 파일내 자바 문법 작성한다.
    - Example1.java ( 파일 )
    2. [실행] .java 파일 -- 컴파일(번역/해석) ---> .class 파일(바이트) 생성
    3. [처리] (컴퓨터가) .class 파일 처리한다.

[ 주석 ]
    HTML : <!-- 주석처리 -->
    CSS : /* 주석처리 */
    JS/JAVA :   // 한줄주석
                /*  여러줄주석 */

[ 자바 활용처 ]
    1. 소프트웨어 : javafx툴 활용, 등등
    2. 웹 : JSP , Spring 등등
    3. 앱 : 안드로이드 등등

[ 자바 코드 실행 ]
    - 자바는 클래스 단위로 컴파일 되고 , 컴파일된 코드는 main함수 부터 읽어서(스레드) 처리한다.


[ 요약 및 중요 사항 ]
Java Class: 자바 코드로 작성된 프로그램의 주요 구성 요소(클래스, 인터페이스 등)를 생성합니다.
            확장자는 항상 .java입니다.

File: 자바 코드 외의 모든 종류의 일반 파일을 생성합니다. 확장자를 직접 지정해야 합니다.

Package: 관련된 자바 클래스들을 논리적으로 묶어 관리하는 데 사용되는 디렉토리 구조입니다.
         자바 프로젝트의 코드 구조를 체계적으로 만드는 데 필수적입니다.

[ 리터럴 ]
    1.정의 : 키보드로 부터 입력한 자료
    2.종류
        정수(int) , 실수(double) , 문자( ' ' ) , 논리( ture/false )
[ 기본타입 ]
    1.정의 : 자료들의 분류
    2.목적 : 효율적인 자료 처리(*분리수거)
    3.종류(8가지)
        [ 정수 ]  byte        1byte        -128 ~ 127
                 short       2byte        +-3만정도 까지
                 int         4byte        +-21억정도 까지( *리터럴)
                 long        8byte        +-21억정도 이상 , 리터럴 정수 뒤에 L/l 붙이기
        [ 실수 ]  float       4byte        소수점8자리 표현, 리터럴실수 뒤에 F/f 붙이기
                 double      8byte        소수점17자리 표현( *리터럴 실수)
        [ 논리 ]  boolean     1byte        true/false
        [ 문자 ]  char        2byte        유니코드, ' '작은따옴표 감싼 문자1개
                 String      클래스         클래스 , " "큰따옴표 감싼 문자 여러개
[ 출력함수 ]
    1. System.out.print();          출력
    2. System.out.println();        출력후 줄바꿈
    3. System.out.printf( "형식문자1 형식문자2" , 값1 , 값2 );    서식(형식) 맞춤 출력
        - 형식문자 : %s문자열, %d정수 , %c문자 , %f실수
        - 자릿수 :
            %자릿수d : 자릿수만큼 자릿수 차지, 만일 비어 있으면 공백, 오른쪽 정렬
            %-자릿수d : 자릿수만큼 자릿수 차지, 만일 비어 있으면 공백, 왼쪽 정렬
            %0자릿수d : 자릿수만큼 자릿수 차지, 만일 비어 있으면 0채움
        - 소수점 자릿수 : %전체자릿수.소수점자릿수f : (소수점포함)전체 자릿수 만큼 자릿수차지
[ 이스케이프/제어문자 ] : 특수문자에 기능이 포함
    \n 줄바꿈 , \t 들여쓰기 , \\ 백슬래시 출력 , \' 작은따옴표 출력 , \" 큰따옴표 출력

[ (변수)타입변환 ]   , ** 다형성 **
    1. 자동(묵시적) 타입변환
        (1) byte -> short/char -> int -> long -> float -> double
        (2) 메모리 크기가 작은 것에서 큰것으로 변환 가능
        (3) 연산결과
            - 두 항 중에 더 큰 항의 타입으로 결과 반환
            - 단 , int 이하는 무조건 int 반환

    2. 강제(명시적) 타입변환
    (1) double -> float -> long -> int -> short/char -> byte
    (2) 메모리 크기가 큰 것에서 작은 것으로 변환가능
    (3) (변환할타입명)변수명;
    (4) 자료의 손실이 생길수 있다.

[ 입력함수 ]
    1. 콘솔화면에서 키보드로 부터 입력받는 방법
    2. 사용법
        (1) 입력객체 생성 : new Scanner( System.in );
            Scanner scan(변수명) = new Scanner( System.in );
            * 주의할점 : Scanner 입력시 자동완성 권장. 안할경우 : 클래스 위에 import java.util.Scanner; 직접 작성
            * import란 다른 클래스(코드정보)호출
        (2) 입력함수
            .next()             :   입력받은 자료를 문자열(String)로 반환, 띄어쓰기 불가능
            .nextLine()         :   입력받은 자료를 문자열(String)로 반환, 띄어쓰기 가능 ,
                                   * 문제점 : .nextLine()앞 코드에 다른 next()존재할 경우 의미없는 nextLine()필요하다.
            .nextByte()         :   입력받은 자료를 정수(byte)로 반환
            .nextShort()        :   입력받은 자료를 정수(short)로 반환
            .nextInt()          :   입력받은 자료를 정수(int)로 반환
            .nextLong()         :   입력받은 자료를 정수(long)로 반환
            .nextFloat()        :   입력받은 자료를 정수(float)로 반환
            .nextDouble()       :   입력받은 자료를 정수(double)로 반환
            .nextBoolean()      :   입력받은 자료를 정수(boolean)로 반환
            .next().charAt(0)   :   입력받은 자료를 첫글자 문자(char) 1개 반환

[ ** 연산자 ** ]
    1. 산술연산자
    2. 연결연산자 : +연결, 값중에 문자열이 포함되면 더하기 대신에 연결
    3. 비교연산자 : >초과 >=이상 <미만 <=이하 ==같다 !=같지않다
    4. 논리연산자 : &&이면서 ||이거간 !부정
    5. 증감연산자 : 변수명++  ++변수명 변수명--  --변수명
    6. 복합대입연산자 : =대입 , += , 연산후대입 *= -= /= %=
    7. 삼항연산자 : 조건 ? 참 : 거짓
    8. 문자열비교 : "문자열A".equals("문자열B"